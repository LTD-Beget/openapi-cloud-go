/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// MysqlDb struct for MysqlDb
type MysqlDb struct {
	Name *string `json:"name,omitempty"`
	Size *string `json:"size,omitempty"`
	Access []MysqlDbAccess `json:"access,omitempty"`
	PmaPasswordSaved *bool `json:"pma_password_saved,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewMysqlDb instantiates a new MysqlDb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlDb() *MysqlDb {
	this := MysqlDb{}
	return &this
}

// NewMysqlDbWithDefaults instantiates a new MysqlDb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlDbWithDefaults() *MysqlDb {
	this := MysqlDb{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MysqlDb) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlDb) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MysqlDb) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MysqlDb) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *MysqlDb) GetSize() string {
	if o == nil || isNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlDb) GetSizeOk() (*string, bool) {
	if o == nil || isNil(o.Size) {
    return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *MysqlDb) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *MysqlDb) SetSize(v string) {
	o.Size = &v
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *MysqlDb) GetAccess() []MysqlDbAccess {
	if o == nil || isNil(o.Access) {
		var ret []MysqlDbAccess
		return ret
	}
	return o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlDb) GetAccessOk() ([]MysqlDbAccess, bool) {
	if o == nil || isNil(o.Access) {
    return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *MysqlDb) HasAccess() bool {
	if o != nil && !isNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given []MysqlDbAccess and assigns it to the Access field.
func (o *MysqlDb) SetAccess(v []MysqlDbAccess) {
	o.Access = v
}

// GetPmaPasswordSaved returns the PmaPasswordSaved field value if set, zero value otherwise.
func (o *MysqlDb) GetPmaPasswordSaved() bool {
	if o == nil || isNil(o.PmaPasswordSaved) {
		var ret bool
		return ret
	}
	return *o.PmaPasswordSaved
}

// GetPmaPasswordSavedOk returns a tuple with the PmaPasswordSaved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlDb) GetPmaPasswordSavedOk() (*bool, bool) {
	if o == nil || isNil(o.PmaPasswordSaved) {
    return nil, false
	}
	return o.PmaPasswordSaved, true
}

// HasPmaPasswordSaved returns a boolean if a field has been set.
func (o *MysqlDb) HasPmaPasswordSaved() bool {
	if o != nil && !isNil(o.PmaPasswordSaved) {
		return true
	}

	return false
}

// SetPmaPasswordSaved gets a reference to the given bool and assigns it to the PmaPasswordSaved field.
func (o *MysqlDb) SetPmaPasswordSaved(v bool) {
	o.PmaPasswordSaved = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MysqlDb) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlDb) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MysqlDb) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MysqlDb) SetDescription(v string) {
	o.Description = &v
}

func (o MysqlDb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !isNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !isNil(o.PmaPasswordSaved) {
		toSerialize["pma_password_saved"] = o.PmaPasswordSaved
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableMysqlDb struct {
	value *MysqlDb
	isSet bool
}

func (v NullableMysqlDb) Get() *MysqlDb {
	return v.value
}

func (v *NullableMysqlDb) Set(val *MysqlDb) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlDb) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlDb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlDb(val *MysqlDb) *NullableMysqlDb {
	return &NullableMysqlDb{value: val, isSet: true}
}

func (v NullableMysqlDb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlDb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


