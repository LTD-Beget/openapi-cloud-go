/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// MysqlCreateParams struct for MysqlCreateParams
type MysqlCreateParams struct {
	DbName *string `json:"db_name,omitempty"`
	AccessPassword *string `json:"access_password,omitempty"`
	Param *map[string]string `json:"param,omitempty"`
	PresetName *string `json:"preset_name,omitempty"`
	SavePmaPassword *bool `json:"save_pma_password,omitempty"`
}

// NewMysqlCreateParams instantiates a new MysqlCreateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlCreateParams() *MysqlCreateParams {
	this := MysqlCreateParams{}
	return &this
}

// NewMysqlCreateParamsWithDefaults instantiates a new MysqlCreateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlCreateParamsWithDefaults() *MysqlCreateParams {
	this := MysqlCreateParams{}
	return &this
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *MysqlCreateParams) GetDbName() string {
	if o == nil || isNil(o.DbName) {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlCreateParams) GetDbNameOk() (*string, bool) {
	if o == nil || isNil(o.DbName) {
    return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *MysqlCreateParams) HasDbName() bool {
	if o != nil && !isNil(o.DbName) {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *MysqlCreateParams) SetDbName(v string) {
	o.DbName = &v
}

// GetAccessPassword returns the AccessPassword field value if set, zero value otherwise.
func (o *MysqlCreateParams) GetAccessPassword() string {
	if o == nil || isNil(o.AccessPassword) {
		var ret string
		return ret
	}
	return *o.AccessPassword
}

// GetAccessPasswordOk returns a tuple with the AccessPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlCreateParams) GetAccessPasswordOk() (*string, bool) {
	if o == nil || isNil(o.AccessPassword) {
    return nil, false
	}
	return o.AccessPassword, true
}

// HasAccessPassword returns a boolean if a field has been set.
func (o *MysqlCreateParams) HasAccessPassword() bool {
	if o != nil && !isNil(o.AccessPassword) {
		return true
	}

	return false
}

// SetAccessPassword gets a reference to the given string and assigns it to the AccessPassword field.
func (o *MysqlCreateParams) SetAccessPassword(v string) {
	o.AccessPassword = &v
}

// GetParam returns the Param field value if set, zero value otherwise.
func (o *MysqlCreateParams) GetParam() map[string]string {
	if o == nil || isNil(o.Param) {
		var ret map[string]string
		return ret
	}
	return *o.Param
}

// GetParamOk returns a tuple with the Param field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlCreateParams) GetParamOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Param) {
    return nil, false
	}
	return o.Param, true
}

// HasParam returns a boolean if a field has been set.
func (o *MysqlCreateParams) HasParam() bool {
	if o != nil && !isNil(o.Param) {
		return true
	}

	return false
}

// SetParam gets a reference to the given map[string]string and assigns it to the Param field.
func (o *MysqlCreateParams) SetParam(v map[string]string) {
	o.Param = &v
}

// GetPresetName returns the PresetName field value if set, zero value otherwise.
func (o *MysqlCreateParams) GetPresetName() string {
	if o == nil || isNil(o.PresetName) {
		var ret string
		return ret
	}
	return *o.PresetName
}

// GetPresetNameOk returns a tuple with the PresetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlCreateParams) GetPresetNameOk() (*string, bool) {
	if o == nil || isNil(o.PresetName) {
    return nil, false
	}
	return o.PresetName, true
}

// HasPresetName returns a boolean if a field has been set.
func (o *MysqlCreateParams) HasPresetName() bool {
	if o != nil && !isNil(o.PresetName) {
		return true
	}

	return false
}

// SetPresetName gets a reference to the given string and assigns it to the PresetName field.
func (o *MysqlCreateParams) SetPresetName(v string) {
	o.PresetName = &v
}

// GetSavePmaPassword returns the SavePmaPassword field value if set, zero value otherwise.
func (o *MysqlCreateParams) GetSavePmaPassword() bool {
	if o == nil || isNil(o.SavePmaPassword) {
		var ret bool
		return ret
	}
	return *o.SavePmaPassword
}

// GetSavePmaPasswordOk returns a tuple with the SavePmaPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlCreateParams) GetSavePmaPasswordOk() (*bool, bool) {
	if o == nil || isNil(o.SavePmaPassword) {
    return nil, false
	}
	return o.SavePmaPassword, true
}

// HasSavePmaPassword returns a boolean if a field has been set.
func (o *MysqlCreateParams) HasSavePmaPassword() bool {
	if o != nil && !isNil(o.SavePmaPassword) {
		return true
	}

	return false
}

// SetSavePmaPassword gets a reference to the given bool and assigns it to the SavePmaPassword field.
func (o *MysqlCreateParams) SetSavePmaPassword(v bool) {
	o.SavePmaPassword = &v
}

func (o MysqlCreateParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DbName) {
		toSerialize["db_name"] = o.DbName
	}
	if !isNil(o.AccessPassword) {
		toSerialize["access_password"] = o.AccessPassword
	}
	if !isNil(o.Param) {
		toSerialize["param"] = o.Param
	}
	if !isNil(o.PresetName) {
		toSerialize["preset_name"] = o.PresetName
	}
	if !isNil(o.SavePmaPassword) {
		toSerialize["save_pma_password"] = o.SavePmaPassword
	}
	return json.Marshal(toSerialize)
}

type NullableMysqlCreateParams struct {
	value *MysqlCreateParams
	isSet bool
}

func (v NullableMysqlCreateParams) Get() *MysqlCreateParams {
	return v.value
}

func (v *NullableMysqlCreateParams) Set(val *MysqlCreateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlCreateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlCreateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlCreateParams(val *MysqlCreateParams) *NullableMysqlCreateParams {
	return &NullableMysqlCreateParams{value: val, isSet: true}
}

func (v NullableMysqlCreateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlCreateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


