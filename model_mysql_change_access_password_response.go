/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// MysqlChangeAccessPasswordResponse struct for MysqlChangeAccessPasswordResponse
type MysqlChangeAccessPasswordResponse struct {
	Access *MysqlDbAccess `json:"access,omitempty"`
	Error *MysqlChangeAccessPasswordResponseError `json:"error,omitempty"`
}

// NewMysqlChangeAccessPasswordResponse instantiates a new MysqlChangeAccessPasswordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlChangeAccessPasswordResponse() *MysqlChangeAccessPasswordResponse {
	this := MysqlChangeAccessPasswordResponse{}
	return &this
}

// NewMysqlChangeAccessPasswordResponseWithDefaults instantiates a new MysqlChangeAccessPasswordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlChangeAccessPasswordResponseWithDefaults() *MysqlChangeAccessPasswordResponse {
	this := MysqlChangeAccessPasswordResponse{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *MysqlChangeAccessPasswordResponse) GetAccess() MysqlDbAccess {
	if o == nil || isNil(o.Access) {
		var ret MysqlDbAccess
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlChangeAccessPasswordResponse) GetAccessOk() (*MysqlDbAccess, bool) {
	if o == nil || isNil(o.Access) {
    return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *MysqlChangeAccessPasswordResponse) HasAccess() bool {
	if o != nil && !isNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given MysqlDbAccess and assigns it to the Access field.
func (o *MysqlChangeAccessPasswordResponse) SetAccess(v MysqlDbAccess) {
	o.Access = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MysqlChangeAccessPasswordResponse) GetError() MysqlChangeAccessPasswordResponseError {
	if o == nil || isNil(o.Error) {
		var ret MysqlChangeAccessPasswordResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlChangeAccessPasswordResponse) GetErrorOk() (*MysqlChangeAccessPasswordResponseError, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MysqlChangeAccessPasswordResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given MysqlChangeAccessPasswordResponseError and assigns it to the Error field.
func (o *MysqlChangeAccessPasswordResponse) SetError(v MysqlChangeAccessPasswordResponseError) {
	o.Error = &v
}

func (o MysqlChangeAccessPasswordResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableMysqlChangeAccessPasswordResponse struct {
	value *MysqlChangeAccessPasswordResponse
	isSet bool
}

func (v NullableMysqlChangeAccessPasswordResponse) Get() *MysqlChangeAccessPasswordResponse {
	return v.value
}

func (v *NullableMysqlChangeAccessPasswordResponse) Set(val *MysqlChangeAccessPasswordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlChangeAccessPasswordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlChangeAccessPasswordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlChangeAccessPasswordResponse(val *MysqlChangeAccessPasswordResponse) *NullableMysqlChangeAccessPasswordResponse {
	return &NullableMysqlChangeAccessPasswordResponse{value: val, isSet: true}
}

func (v NullableMysqlChangeAccessPasswordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlChangeAccessPasswordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


