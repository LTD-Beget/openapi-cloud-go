/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// S3GetPriceResponse struct for S3GetPriceResponse
type S3GetPriceResponse struct {
	RateDay *float64 `json:"rate_day,omitempty"`
	RateDayOverload *float64 `json:"rate_day_overload,omitempty"`
}

// NewS3GetPriceResponse instantiates a new S3GetPriceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3GetPriceResponse() *S3GetPriceResponse {
	this := S3GetPriceResponse{}
	return &this
}

// NewS3GetPriceResponseWithDefaults instantiates a new S3GetPriceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3GetPriceResponseWithDefaults() *S3GetPriceResponse {
	this := S3GetPriceResponse{}
	return &this
}

// GetRateDay returns the RateDay field value if set, zero value otherwise.
func (o *S3GetPriceResponse) GetRateDay() float64 {
	if o == nil || isNil(o.RateDay) {
		var ret float64
		return ret
	}
	return *o.RateDay
}

// GetRateDayOk returns a tuple with the RateDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3GetPriceResponse) GetRateDayOk() (*float64, bool) {
	if o == nil || isNil(o.RateDay) {
    return nil, false
	}
	return o.RateDay, true
}

// HasRateDay returns a boolean if a field has been set.
func (o *S3GetPriceResponse) HasRateDay() bool {
	if o != nil && !isNil(o.RateDay) {
		return true
	}

	return false
}

// SetRateDay gets a reference to the given float64 and assigns it to the RateDay field.
func (o *S3GetPriceResponse) SetRateDay(v float64) {
	o.RateDay = &v
}

// GetRateDayOverload returns the RateDayOverload field value if set, zero value otherwise.
func (o *S3GetPriceResponse) GetRateDayOverload() float64 {
	if o == nil || isNil(o.RateDayOverload) {
		var ret float64
		return ret
	}
	return *o.RateDayOverload
}

// GetRateDayOverloadOk returns a tuple with the RateDayOverload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3GetPriceResponse) GetRateDayOverloadOk() (*float64, bool) {
	if o == nil || isNil(o.RateDayOverload) {
    return nil, false
	}
	return o.RateDayOverload, true
}

// HasRateDayOverload returns a boolean if a field has been set.
func (o *S3GetPriceResponse) HasRateDayOverload() bool {
	if o != nil && !isNil(o.RateDayOverload) {
		return true
	}

	return false
}

// SetRateDayOverload gets a reference to the given float64 and assigns it to the RateDayOverload field.
func (o *S3GetPriceResponse) SetRateDayOverload(v float64) {
	o.RateDayOverload = &v
}

func (o S3GetPriceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RateDay) {
		toSerialize["rate_day"] = o.RateDay
	}
	if !isNil(o.RateDayOverload) {
		toSerialize["rate_day_overload"] = o.RateDayOverload
	}
	return json.Marshal(toSerialize)
}

type NullableS3GetPriceResponse struct {
	value *S3GetPriceResponse
	isSet bool
}

func (v NullableS3GetPriceResponse) Get() *S3GetPriceResponse {
	return v.value
}

func (v *NullableS3GetPriceResponse) Set(val *S3GetPriceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableS3GetPriceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableS3GetPriceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3GetPriceResponse(val *S3GetPriceResponse) *NullableS3GetPriceResponse {
	return &NullableS3GetPriceResponse{value: val, isSet: true}
}

func (v NullableS3GetPriceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3GetPriceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


