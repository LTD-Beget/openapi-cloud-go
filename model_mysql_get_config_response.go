/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// MysqlGetConfigResponse struct for MysqlGetConfigResponse
type MysqlGetConfigResponse struct {
	Config *MysqlConfigInfo `json:"config,omitempty"`
}

// NewMysqlGetConfigResponse instantiates a new MysqlGetConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlGetConfigResponse() *MysqlGetConfigResponse {
	this := MysqlGetConfigResponse{}
	return &this
}

// NewMysqlGetConfigResponseWithDefaults instantiates a new MysqlGetConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlGetConfigResponseWithDefaults() *MysqlGetConfigResponse {
	this := MysqlGetConfigResponse{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *MysqlGetConfigResponse) GetConfig() MysqlConfigInfo {
	if o == nil || isNil(o.Config) {
		var ret MysqlConfigInfo
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlGetConfigResponse) GetConfigOk() (*MysqlConfigInfo, bool) {
	if o == nil || isNil(o.Config) {
    return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *MysqlGetConfigResponse) HasConfig() bool {
	if o != nil && !isNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given MysqlConfigInfo and assigns it to the Config field.
func (o *MysqlGetConfigResponse) SetConfig(v MysqlConfigInfo) {
	o.Config = &v
}

func (o MysqlGetConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableMysqlGetConfigResponse struct {
	value *MysqlGetConfigResponse
	isSet bool
}

func (v NullableMysqlGetConfigResponse) Get() *MysqlGetConfigResponse {
	return v.value
}

func (v *NullableMysqlGetConfigResponse) Set(val *MysqlGetConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlGetConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlGetConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlGetConfigResponse(val *MysqlGetConfigResponse) *NullableMysqlGetConfigResponse {
	return &NullableMysqlGetConfigResponse{value: val, isSet: true}
}

func (v NullableMysqlGetConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlGetConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


