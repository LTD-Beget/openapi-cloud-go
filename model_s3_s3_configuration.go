/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// S3S3Configuration struct for S3S3Configuration
type S3S3Configuration struct {
	SubscriptionDiskSize *int32 `json:"subscription_disk_size,omitempty"`
	PriceOverloadDay *float64 `json:"price_overload_day,omitempty"`
	PriceOverloadMonth *float64 `json:"price_overload_month,omitempty"`
}

// NewS3S3Configuration instantiates a new S3S3Configuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3S3Configuration() *S3S3Configuration {
	this := S3S3Configuration{}
	return &this
}

// NewS3S3ConfigurationWithDefaults instantiates a new S3S3Configuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3S3ConfigurationWithDefaults() *S3S3Configuration {
	this := S3S3Configuration{}
	return &this
}

// GetSubscriptionDiskSize returns the SubscriptionDiskSize field value if set, zero value otherwise.
func (o *S3S3Configuration) GetSubscriptionDiskSize() int32 {
	if o == nil || isNil(o.SubscriptionDiskSize) {
		var ret int32
		return ret
	}
	return *o.SubscriptionDiskSize
}

// GetSubscriptionDiskSizeOk returns a tuple with the SubscriptionDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3S3Configuration) GetSubscriptionDiskSizeOk() (*int32, bool) {
	if o == nil || isNil(o.SubscriptionDiskSize) {
    return nil, false
	}
	return o.SubscriptionDiskSize, true
}

// HasSubscriptionDiskSize returns a boolean if a field has been set.
func (o *S3S3Configuration) HasSubscriptionDiskSize() bool {
	if o != nil && !isNil(o.SubscriptionDiskSize) {
		return true
	}

	return false
}

// SetSubscriptionDiskSize gets a reference to the given int32 and assigns it to the SubscriptionDiskSize field.
func (o *S3S3Configuration) SetSubscriptionDiskSize(v int32) {
	o.SubscriptionDiskSize = &v
}

// GetPriceOverloadDay returns the PriceOverloadDay field value if set, zero value otherwise.
func (o *S3S3Configuration) GetPriceOverloadDay() float64 {
	if o == nil || isNil(o.PriceOverloadDay) {
		var ret float64
		return ret
	}
	return *o.PriceOverloadDay
}

// GetPriceOverloadDayOk returns a tuple with the PriceOverloadDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3S3Configuration) GetPriceOverloadDayOk() (*float64, bool) {
	if o == nil || isNil(o.PriceOverloadDay) {
    return nil, false
	}
	return o.PriceOverloadDay, true
}

// HasPriceOverloadDay returns a boolean if a field has been set.
func (o *S3S3Configuration) HasPriceOverloadDay() bool {
	if o != nil && !isNil(o.PriceOverloadDay) {
		return true
	}

	return false
}

// SetPriceOverloadDay gets a reference to the given float64 and assigns it to the PriceOverloadDay field.
func (o *S3S3Configuration) SetPriceOverloadDay(v float64) {
	o.PriceOverloadDay = &v
}

// GetPriceOverloadMonth returns the PriceOverloadMonth field value if set, zero value otherwise.
func (o *S3S3Configuration) GetPriceOverloadMonth() float64 {
	if o == nil || isNil(o.PriceOverloadMonth) {
		var ret float64
		return ret
	}
	return *o.PriceOverloadMonth
}

// GetPriceOverloadMonthOk returns a tuple with the PriceOverloadMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3S3Configuration) GetPriceOverloadMonthOk() (*float64, bool) {
	if o == nil || isNil(o.PriceOverloadMonth) {
    return nil, false
	}
	return o.PriceOverloadMonth, true
}

// HasPriceOverloadMonth returns a boolean if a field has been set.
func (o *S3S3Configuration) HasPriceOverloadMonth() bool {
	if o != nil && !isNil(o.PriceOverloadMonth) {
		return true
	}

	return false
}

// SetPriceOverloadMonth gets a reference to the given float64 and assigns it to the PriceOverloadMonth field.
func (o *S3S3Configuration) SetPriceOverloadMonth(v float64) {
	o.PriceOverloadMonth = &v
}

func (o S3S3Configuration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SubscriptionDiskSize) {
		toSerialize["subscription_disk_size"] = o.SubscriptionDiskSize
	}
	if !isNil(o.PriceOverloadDay) {
		toSerialize["price_overload_day"] = o.PriceOverloadDay
	}
	if !isNil(o.PriceOverloadMonth) {
		toSerialize["price_overload_month"] = o.PriceOverloadMonth
	}
	return json.Marshal(toSerialize)
}

type NullableS3S3Configuration struct {
	value *S3S3Configuration
	isSet bool
}

func (v NullableS3S3Configuration) Get() *S3S3Configuration {
	return v.value
}

func (v *NullableS3S3Configuration) Set(val *S3S3Configuration) {
	v.value = val
	v.isSet = true
}

func (v NullableS3S3Configuration) IsSet() bool {
	return v.isSet
}

func (v *NullableS3S3Configuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3S3Configuration(val *S3S3Configuration) *NullableS3S3Configuration {
	return &NullableS3S3Configuration{value: val, isSet: true}
}

func (v NullableS3S3Configuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3S3Configuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


