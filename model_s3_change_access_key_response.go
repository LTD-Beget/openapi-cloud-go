/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// S3ChangeAccessKeyResponse struct for S3ChangeAccessKeyResponse
type S3ChangeAccessKeyResponse struct {
	S3 *S3S3 `json:"s3,omitempty"`
	Error *S3ChangeAccessKeyResponseError `json:"error,omitempty"`
}

// NewS3ChangeAccessKeyResponse instantiates a new S3ChangeAccessKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3ChangeAccessKeyResponse() *S3ChangeAccessKeyResponse {
	this := S3ChangeAccessKeyResponse{}
	return &this
}

// NewS3ChangeAccessKeyResponseWithDefaults instantiates a new S3ChangeAccessKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ChangeAccessKeyResponseWithDefaults() *S3ChangeAccessKeyResponse {
	this := S3ChangeAccessKeyResponse{}
	return &this
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *S3ChangeAccessKeyResponse) GetS3() S3S3 {
	if o == nil || isNil(o.S3) {
		var ret S3S3
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ChangeAccessKeyResponse) GetS3Ok() (*S3S3, bool) {
	if o == nil || isNil(o.S3) {
    return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *S3ChangeAccessKeyResponse) HasS3() bool {
	if o != nil && !isNil(o.S3) {
		return true
	}

	return false
}

// SetS3 gets a reference to the given S3S3 and assigns it to the S3 field.
func (o *S3ChangeAccessKeyResponse) SetS3(v S3S3) {
	o.S3 = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *S3ChangeAccessKeyResponse) GetError() S3ChangeAccessKeyResponseError {
	if o == nil || isNil(o.Error) {
		var ret S3ChangeAccessKeyResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ChangeAccessKeyResponse) GetErrorOk() (*S3ChangeAccessKeyResponseError, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *S3ChangeAccessKeyResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given S3ChangeAccessKeyResponseError and assigns it to the Error field.
func (o *S3ChangeAccessKeyResponse) SetError(v S3ChangeAccessKeyResponseError) {
	o.Error = &v
}

func (o S3ChangeAccessKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.S3) {
		toSerialize["s3"] = o.S3
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableS3ChangeAccessKeyResponse struct {
	value *S3ChangeAccessKeyResponse
	isSet bool
}

func (v NullableS3ChangeAccessKeyResponse) Get() *S3ChangeAccessKeyResponse {
	return v.value
}

func (v *NullableS3ChangeAccessKeyResponse) Set(val *S3ChangeAccessKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableS3ChangeAccessKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableS3ChangeAccessKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3ChangeAccessKeyResponse(val *S3ChangeAccessKeyResponse) *NullableS3ChangeAccessKeyResponse {
	return &NullableS3ChangeAccessKeyResponse{value: val, isSet: true}
}

func (v NullableS3ChangeAccessKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3ChangeAccessKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


