/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// S3Cors struct for S3Cors
type S3Cors struct {
	Id *int32 `json:"id,omitempty"`
	HttpMethod []string `json:"http_method,omitempty"`
	HttpHeader []string `json:"http_header,omitempty"`
	CacheTtl *string `json:"cache_ttl,omitempty"`
	Fqdn *string `json:"fqdn,omitempty"`
}

// NewS3Cors instantiates a new S3Cors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Cors() *S3Cors {
	this := S3Cors{}
	return &this
}

// NewS3CorsWithDefaults instantiates a new S3Cors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3CorsWithDefaults() *S3Cors {
	this := S3Cors{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *S3Cors) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Cors) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *S3Cors) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *S3Cors) SetId(v int32) {
	o.Id = &v
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *S3Cors) GetHttpMethod() []string {
	if o == nil || isNil(o.HttpMethod) {
		var ret []string
		return ret
	}
	return o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Cors) GetHttpMethodOk() ([]string, bool) {
	if o == nil || isNil(o.HttpMethod) {
    return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *S3Cors) HasHttpMethod() bool {
	if o != nil && !isNil(o.HttpMethod) {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given []string and assigns it to the HttpMethod field.
func (o *S3Cors) SetHttpMethod(v []string) {
	o.HttpMethod = v
}

// GetHttpHeader returns the HttpHeader field value if set, zero value otherwise.
func (o *S3Cors) GetHttpHeader() []string {
	if o == nil || isNil(o.HttpHeader) {
		var ret []string
		return ret
	}
	return o.HttpHeader
}

// GetHttpHeaderOk returns a tuple with the HttpHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Cors) GetHttpHeaderOk() ([]string, bool) {
	if o == nil || isNil(o.HttpHeader) {
    return nil, false
	}
	return o.HttpHeader, true
}

// HasHttpHeader returns a boolean if a field has been set.
func (o *S3Cors) HasHttpHeader() bool {
	if o != nil && !isNil(o.HttpHeader) {
		return true
	}

	return false
}

// SetHttpHeader gets a reference to the given []string and assigns it to the HttpHeader field.
func (o *S3Cors) SetHttpHeader(v []string) {
	o.HttpHeader = v
}

// GetCacheTtl returns the CacheTtl field value if set, zero value otherwise.
func (o *S3Cors) GetCacheTtl() string {
	if o == nil || isNil(o.CacheTtl) {
		var ret string
		return ret
	}
	return *o.CacheTtl
}

// GetCacheTtlOk returns a tuple with the CacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Cors) GetCacheTtlOk() (*string, bool) {
	if o == nil || isNil(o.CacheTtl) {
    return nil, false
	}
	return o.CacheTtl, true
}

// HasCacheTtl returns a boolean if a field has been set.
func (o *S3Cors) HasCacheTtl() bool {
	if o != nil && !isNil(o.CacheTtl) {
		return true
	}

	return false
}

// SetCacheTtl gets a reference to the given string and assigns it to the CacheTtl field.
func (o *S3Cors) SetCacheTtl(v string) {
	o.CacheTtl = &v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *S3Cors) GetFqdn() string {
	if o == nil || isNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Cors) GetFqdnOk() (*string, bool) {
	if o == nil || isNil(o.Fqdn) {
    return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *S3Cors) HasFqdn() bool {
	if o != nil && !isNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *S3Cors) SetFqdn(v string) {
	o.Fqdn = &v
}

func (o S3Cors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.HttpMethod) {
		toSerialize["http_method"] = o.HttpMethod
	}
	if !isNil(o.HttpHeader) {
		toSerialize["http_header"] = o.HttpHeader
	}
	if !isNil(o.CacheTtl) {
		toSerialize["cache_ttl"] = o.CacheTtl
	}
	if !isNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	return json.Marshal(toSerialize)
}

type NullableS3Cors struct {
	value *S3Cors
	isSet bool
}

func (v NullableS3Cors) Get() *S3Cors {
	return v.value
}

func (v *NullableS3Cors) Set(val *S3Cors) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Cors) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Cors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Cors(val *S3Cors) *NullableS3Cors {
	return &NullableS3Cors{value: val, isSet: true}
}

func (v NullableS3Cors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Cors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


