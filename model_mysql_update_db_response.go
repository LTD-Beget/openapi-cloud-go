/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// MysqlUpdateDbResponse struct for MysqlUpdateDbResponse
type MysqlUpdateDbResponse struct {
	Db *MysqlDb `json:"db,omitempty"`
	Error *MysqlUpdateDbResponseError `json:"error,omitempty"`
}

// NewMysqlUpdateDbResponse instantiates a new MysqlUpdateDbResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlUpdateDbResponse() *MysqlUpdateDbResponse {
	this := MysqlUpdateDbResponse{}
	return &this
}

// NewMysqlUpdateDbResponseWithDefaults instantiates a new MysqlUpdateDbResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlUpdateDbResponseWithDefaults() *MysqlUpdateDbResponse {
	this := MysqlUpdateDbResponse{}
	return &this
}

// GetDb returns the Db field value if set, zero value otherwise.
func (o *MysqlUpdateDbResponse) GetDb() MysqlDb {
	if o == nil || isNil(o.Db) {
		var ret MysqlDb
		return ret
	}
	return *o.Db
}

// GetDbOk returns a tuple with the Db field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlUpdateDbResponse) GetDbOk() (*MysqlDb, bool) {
	if o == nil || isNil(o.Db) {
    return nil, false
	}
	return o.Db, true
}

// HasDb returns a boolean if a field has been set.
func (o *MysqlUpdateDbResponse) HasDb() bool {
	if o != nil && !isNil(o.Db) {
		return true
	}

	return false
}

// SetDb gets a reference to the given MysqlDb and assigns it to the Db field.
func (o *MysqlUpdateDbResponse) SetDb(v MysqlDb) {
	o.Db = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MysqlUpdateDbResponse) GetError() MysqlUpdateDbResponseError {
	if o == nil || isNil(o.Error) {
		var ret MysqlUpdateDbResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlUpdateDbResponse) GetErrorOk() (*MysqlUpdateDbResponseError, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MysqlUpdateDbResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given MysqlUpdateDbResponseError and assigns it to the Error field.
func (o *MysqlUpdateDbResponse) SetError(v MysqlUpdateDbResponseError) {
	o.Error = &v
}

func (o MysqlUpdateDbResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Db) {
		toSerialize["db"] = o.Db
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableMysqlUpdateDbResponse struct {
	value *MysqlUpdateDbResponse
	isSet bool
}

func (v NullableMysqlUpdateDbResponse) Get() *MysqlUpdateDbResponse {
	return v.value
}

func (v *NullableMysqlUpdateDbResponse) Set(val *MysqlUpdateDbResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlUpdateDbResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlUpdateDbResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlUpdateDbResponse(val *MysqlUpdateDbResponse) *NullableMysqlUpdateDbResponse {
	return &NullableMysqlUpdateDbResponse{value: val, isSet: true}
}

func (v NullableMysqlUpdateDbResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlUpdateDbResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


