/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MysqlBackupServiceApiService MysqlBackupServiceApi service
type MysqlBackupServiceApiService service

type ApiMysqlBackupServiceGetListRequest struct {
	ctx context.Context
	ApiService *MysqlBackupServiceApiService
}

func (r ApiMysqlBackupServiceGetListRequest) Execute() (*MysqlBackupGetListResponse, *http.Response, error) {
	return r.ApiService.MysqlBackupServiceGetListExecute(r)
}

/*
MysqlBackupServiceGetList Method for MysqlBackupServiceGetList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMysqlBackupServiceGetListRequest
*/
func (a *MysqlBackupServiceApiService) MysqlBackupServiceGetList(ctx context.Context) ApiMysqlBackupServiceGetListRequest {
	return ApiMysqlBackupServiceGetListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MysqlBackupGetListResponse
func (a *MysqlBackupServiceApiService) MysqlBackupServiceGetListExecute(r ApiMysqlBackupServiceGetListRequest) (*MysqlBackupGetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MysqlBackupGetListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MysqlBackupServiceApiService.MysqlBackupServiceGetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloud/mysql/backup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMysqlBackupServiceGetOrdersRequest struct {
	ctx context.Context
	ApiService *MysqlBackupServiceApiService
	limit *int32
	offset *int32
}

func (r ApiMysqlBackupServiceGetOrdersRequest) Limit(limit int32) ApiMysqlBackupServiceGetOrdersRequest {
	r.limit = &limit
	return r
}

func (r ApiMysqlBackupServiceGetOrdersRequest) Offset(offset int32) ApiMysqlBackupServiceGetOrdersRequest {
	r.offset = &offset
	return r
}

func (r ApiMysqlBackupServiceGetOrdersRequest) Execute() (*MysqlBackupGetOrdersResponse, *http.Response, error) {
	return r.ApiService.MysqlBackupServiceGetOrdersExecute(r)
}

/*
MysqlBackupServiceGetOrders Method for MysqlBackupServiceGetOrders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMysqlBackupServiceGetOrdersRequest
*/
func (a *MysqlBackupServiceApiService) MysqlBackupServiceGetOrders(ctx context.Context) ApiMysqlBackupServiceGetOrdersRequest {
	return ApiMysqlBackupServiceGetOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MysqlBackupGetOrdersResponse
func (a *MysqlBackupServiceApiService) MysqlBackupServiceGetOrdersExecute(r ApiMysqlBackupServiceGetOrdersRequest) (*MysqlBackupGetOrdersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MysqlBackupGetOrdersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MysqlBackupServiceApiService.MysqlBackupServiceGetOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloud/mysql/backup/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMysqlBackupServiceRestoreRequest struct {
	ctx context.Context
	ApiService *MysqlBackupServiceApiService
	copyId string
	mysqlBackupRestoreRequest *MysqlBackupRestoreRequest
}

func (r ApiMysqlBackupServiceRestoreRequest) MysqlBackupRestoreRequest(mysqlBackupRestoreRequest MysqlBackupRestoreRequest) ApiMysqlBackupServiceRestoreRequest {
	r.mysqlBackupRestoreRequest = &mysqlBackupRestoreRequest
	return r
}

func (r ApiMysqlBackupServiceRestoreRequest) Execute() (*MysqlBackupRestoreResponse, *http.Response, error) {
	return r.ApiService.MysqlBackupServiceRestoreExecute(r)
}

/*
MysqlBackupServiceRestore Method for MysqlBackupServiceRestore

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param copyId
 @return ApiMysqlBackupServiceRestoreRequest
*/
func (a *MysqlBackupServiceApiService) MysqlBackupServiceRestore(ctx context.Context, copyId string) ApiMysqlBackupServiceRestoreRequest {
	return ApiMysqlBackupServiceRestoreRequest{
		ApiService: a,
		ctx: ctx,
		copyId: copyId,
	}
}

// Execute executes the request
//  @return MysqlBackupRestoreResponse
func (a *MysqlBackupServiceApiService) MysqlBackupServiceRestoreExecute(r ApiMysqlBackupServiceRestoreRequest) (*MysqlBackupRestoreResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MysqlBackupRestoreResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MysqlBackupServiceApiService.MysqlBackupServiceRestore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloud/mysql/backup/{copy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"copy_id"+"}", url.PathEscape(parameterToString(r.copyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mysqlBackupRestoreRequest == nil {
		return localVarReturnValue, nil, reportError("mysqlBackupRestoreRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mysqlBackupRestoreRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
