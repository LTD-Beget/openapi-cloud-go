/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// MysqlBackupRestoreResponse struct for MysqlBackupRestoreResponse
type MysqlBackupRestoreResponse struct {
	Order *StructuresMysqlRestoreOrder `json:"order,omitempty"`
	Error *MysqlBackupRestoreResponseError `json:"error,omitempty"`
}

// NewMysqlBackupRestoreResponse instantiates a new MysqlBackupRestoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlBackupRestoreResponse() *MysqlBackupRestoreResponse {
	this := MysqlBackupRestoreResponse{}
	return &this
}

// NewMysqlBackupRestoreResponseWithDefaults instantiates a new MysqlBackupRestoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlBackupRestoreResponseWithDefaults() *MysqlBackupRestoreResponse {
	this := MysqlBackupRestoreResponse{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *MysqlBackupRestoreResponse) GetOrder() StructuresMysqlRestoreOrder {
	if o == nil || isNil(o.Order) {
		var ret StructuresMysqlRestoreOrder
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlBackupRestoreResponse) GetOrderOk() (*StructuresMysqlRestoreOrder, bool) {
	if o == nil || isNil(o.Order) {
    return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *MysqlBackupRestoreResponse) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given StructuresMysqlRestoreOrder and assigns it to the Order field.
func (o *MysqlBackupRestoreResponse) SetOrder(v StructuresMysqlRestoreOrder) {
	o.Order = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MysqlBackupRestoreResponse) GetError() MysqlBackupRestoreResponseError {
	if o == nil || isNil(o.Error) {
		var ret MysqlBackupRestoreResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlBackupRestoreResponse) GetErrorOk() (*MysqlBackupRestoreResponseError, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MysqlBackupRestoreResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given MysqlBackupRestoreResponseError and assigns it to the Error field.
func (o *MysqlBackupRestoreResponse) SetError(v MysqlBackupRestoreResponseError) {
	o.Error = &v
}

func (o MysqlBackupRestoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableMysqlBackupRestoreResponse struct {
	value *MysqlBackupRestoreResponse
	isSet bool
}

func (v NullableMysqlBackupRestoreResponse) Get() *MysqlBackupRestoreResponse {
	return v.value
}

func (v *NullableMysqlBackupRestoreResponse) Set(val *MysqlBackupRestoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlBackupRestoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlBackupRestoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlBackupRestoreResponse(val *MysqlBackupRestoreResponse) *NullableMysqlBackupRestoreResponse {
	return &NullableMysqlBackupRestoreResponse{value: val, isSet: true}
}

func (v NullableMysqlBackupRestoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlBackupRestoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


