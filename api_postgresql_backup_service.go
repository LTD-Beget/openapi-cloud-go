/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PostgresqlBackupServiceApiService PostgresqlBackupServiceApi service
type PostgresqlBackupServiceApiService service

type ApiPostgresqlBackupServiceGetListRequest struct {
	ctx context.Context
	ApiService *PostgresqlBackupServiceApiService
}

func (r ApiPostgresqlBackupServiceGetListRequest) Execute() (*PostgresqlBackupGetListResponse, *http.Response, error) {
	return r.ApiService.PostgresqlBackupServiceGetListExecute(r)
}

/*
PostgresqlBackupServiceGetList Method for PostgresqlBackupServiceGetList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostgresqlBackupServiceGetListRequest
*/
func (a *PostgresqlBackupServiceApiService) PostgresqlBackupServiceGetList(ctx context.Context) ApiPostgresqlBackupServiceGetListRequest {
	return ApiPostgresqlBackupServiceGetListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PostgresqlBackupGetListResponse
func (a *PostgresqlBackupServiceApiService) PostgresqlBackupServiceGetListExecute(r ApiPostgresqlBackupServiceGetListRequest) (*PostgresqlBackupGetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresqlBackupGetListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresqlBackupServiceApiService.PostgresqlBackupServiceGetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloud/postgresql/backup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostgresqlBackupServiceGetOrdersRequest struct {
	ctx context.Context
	ApiService *PostgresqlBackupServiceApiService
	limit *int32
	offset *int32
}

func (r ApiPostgresqlBackupServiceGetOrdersRequest) Limit(limit int32) ApiPostgresqlBackupServiceGetOrdersRequest {
	r.limit = &limit
	return r
}

func (r ApiPostgresqlBackupServiceGetOrdersRequest) Offset(offset int32) ApiPostgresqlBackupServiceGetOrdersRequest {
	r.offset = &offset
	return r
}

func (r ApiPostgresqlBackupServiceGetOrdersRequest) Execute() (*PostgresqlBackupGetOrdersResponse, *http.Response, error) {
	return r.ApiService.PostgresqlBackupServiceGetOrdersExecute(r)
}

/*
PostgresqlBackupServiceGetOrders Method for PostgresqlBackupServiceGetOrders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostgresqlBackupServiceGetOrdersRequest
*/
func (a *PostgresqlBackupServiceApiService) PostgresqlBackupServiceGetOrders(ctx context.Context) ApiPostgresqlBackupServiceGetOrdersRequest {
	return ApiPostgresqlBackupServiceGetOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PostgresqlBackupGetOrdersResponse
func (a *PostgresqlBackupServiceApiService) PostgresqlBackupServiceGetOrdersExecute(r ApiPostgresqlBackupServiceGetOrdersRequest) (*PostgresqlBackupGetOrdersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresqlBackupGetOrdersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresqlBackupServiceApiService.PostgresqlBackupServiceGetOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloud/postgresql/backup/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostgresqlBackupServiceRestoreRequest struct {
	ctx context.Context
	ApiService *PostgresqlBackupServiceApiService
	copyId string
	postgresqlBackupRestoreRequest *PostgresqlBackupRestoreRequest
}

func (r ApiPostgresqlBackupServiceRestoreRequest) PostgresqlBackupRestoreRequest(postgresqlBackupRestoreRequest PostgresqlBackupRestoreRequest) ApiPostgresqlBackupServiceRestoreRequest {
	r.postgresqlBackupRestoreRequest = &postgresqlBackupRestoreRequest
	return r
}

func (r ApiPostgresqlBackupServiceRestoreRequest) Execute() (*PostgresqlBackupRestoreResponse, *http.Response, error) {
	return r.ApiService.PostgresqlBackupServiceRestoreExecute(r)
}

/*
PostgresqlBackupServiceRestore Method for PostgresqlBackupServiceRestore

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param copyId
 @return ApiPostgresqlBackupServiceRestoreRequest
*/
func (a *PostgresqlBackupServiceApiService) PostgresqlBackupServiceRestore(ctx context.Context, copyId string) ApiPostgresqlBackupServiceRestoreRequest {
	return ApiPostgresqlBackupServiceRestoreRequest{
		ApiService: a,
		ctx: ctx,
		copyId: copyId,
	}
}

// Execute executes the request
//  @return PostgresqlBackupRestoreResponse
func (a *PostgresqlBackupServiceApiService) PostgresqlBackupServiceRestoreExecute(r ApiPostgresqlBackupServiceRestoreRequest) (*PostgresqlBackupRestoreResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresqlBackupRestoreResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresqlBackupServiceApiService.PostgresqlBackupServiceRestore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloud/postgresql/backup/{copy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"copy_id"+"}", url.PathEscape(parameterToString(r.copyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postgresqlBackupRestoreRequest == nil {
		return localVarReturnValue, nil, reportError("postgresqlBackupRestoreRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postgresqlBackupRestoreRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
