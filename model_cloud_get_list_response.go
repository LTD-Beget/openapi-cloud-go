/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// CloudGetListResponse struct for CloudGetListResponse
type CloudGetListResponse struct {
	Service []CloudService `json:"service,omitempty"`
}

// NewCloudGetListResponse instantiates a new CloudGetListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudGetListResponse() *CloudGetListResponse {
	this := CloudGetListResponse{}
	return &this
}

// NewCloudGetListResponseWithDefaults instantiates a new CloudGetListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudGetListResponseWithDefaults() *CloudGetListResponse {
	this := CloudGetListResponse{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *CloudGetListResponse) GetService() []CloudService {
	if o == nil || isNil(o.Service) {
		var ret []CloudService
		return ret
	}
	return o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudGetListResponse) GetServiceOk() ([]CloudService, bool) {
	if o == nil || isNil(o.Service) {
    return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *CloudGetListResponse) HasService() bool {
	if o != nil && !isNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given []CloudService and assigns it to the Service field.
func (o *CloudGetListResponse) SetService(v []CloudService) {
	o.Service = v
}

func (o CloudGetListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	return json.Marshal(toSerialize)
}

type NullableCloudGetListResponse struct {
	value *CloudGetListResponse
	isSet bool
}

func (v NullableCloudGetListResponse) Get() *CloudGetListResponse {
	return v.value
}

func (v *NullableCloudGetListResponse) Set(val *CloudGetListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudGetListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudGetListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudGetListResponse(val *CloudGetListResponse) *NullableCloudGetListResponse {
	return &NullableCloudGetListResponse{value: val, isSet: true}
}

func (v NullableCloudGetListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudGetListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


