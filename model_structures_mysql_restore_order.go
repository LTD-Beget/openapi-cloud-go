/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// StructuresMysqlRestoreOrder struct for StructuresMysqlRestoreOrder
type StructuresMysqlRestoreOrder struct {
	Id *string `json:"id,omitempty"`
	CopyInfo *StructuresMysqlCopy `json:"copy_info,omitempty"`
	BackupDateCreate *string `json:"backup_date_create,omitempty"`
	ServiceId *string `json:"service_id,omitempty"`
	ServiceName *string `json:"service_name,omitempty"`
	DateCreate *string `json:"date_create,omitempty"`
	DateComplete *string `json:"date_complete,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewStructuresMysqlRestoreOrder instantiates a new StructuresMysqlRestoreOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructuresMysqlRestoreOrder() *StructuresMysqlRestoreOrder {
	this := StructuresMysqlRestoreOrder{}
	return &this
}

// NewStructuresMysqlRestoreOrderWithDefaults instantiates a new StructuresMysqlRestoreOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructuresMysqlRestoreOrderWithDefaults() *StructuresMysqlRestoreOrder {
	this := StructuresMysqlRestoreOrder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StructuresMysqlRestoreOrder) SetId(v string) {
	o.Id = &v
}

// GetCopyInfo returns the CopyInfo field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetCopyInfo() StructuresMysqlCopy {
	if o == nil || isNil(o.CopyInfo) {
		var ret StructuresMysqlCopy
		return ret
	}
	return *o.CopyInfo
}

// GetCopyInfoOk returns a tuple with the CopyInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetCopyInfoOk() (*StructuresMysqlCopy, bool) {
	if o == nil || isNil(o.CopyInfo) {
    return nil, false
	}
	return o.CopyInfo, true
}

// HasCopyInfo returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasCopyInfo() bool {
	if o != nil && !isNil(o.CopyInfo) {
		return true
	}

	return false
}

// SetCopyInfo gets a reference to the given StructuresMysqlCopy and assigns it to the CopyInfo field.
func (o *StructuresMysqlRestoreOrder) SetCopyInfo(v StructuresMysqlCopy) {
	o.CopyInfo = &v
}

// GetBackupDateCreate returns the BackupDateCreate field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetBackupDateCreate() string {
	if o == nil || isNil(o.BackupDateCreate) {
		var ret string
		return ret
	}
	return *o.BackupDateCreate
}

// GetBackupDateCreateOk returns a tuple with the BackupDateCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetBackupDateCreateOk() (*string, bool) {
	if o == nil || isNil(o.BackupDateCreate) {
    return nil, false
	}
	return o.BackupDateCreate, true
}

// HasBackupDateCreate returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasBackupDateCreate() bool {
	if o != nil && !isNil(o.BackupDateCreate) {
		return true
	}

	return false
}

// SetBackupDateCreate gets a reference to the given string and assigns it to the BackupDateCreate field.
func (o *StructuresMysqlRestoreOrder) SetBackupDateCreate(v string) {
	o.BackupDateCreate = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetServiceId() string {
	if o == nil || isNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetServiceIdOk() (*string, bool) {
	if o == nil || isNil(o.ServiceId) {
    return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasServiceId() bool {
	if o != nil && !isNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *StructuresMysqlRestoreOrder) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetServiceName() string {
	if o == nil || isNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetServiceNameOk() (*string, bool) {
	if o == nil || isNil(o.ServiceName) {
    return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasServiceName() bool {
	if o != nil && !isNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *StructuresMysqlRestoreOrder) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetDateCreate returns the DateCreate field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetDateCreate() string {
	if o == nil || isNil(o.DateCreate) {
		var ret string
		return ret
	}
	return *o.DateCreate
}

// GetDateCreateOk returns a tuple with the DateCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetDateCreateOk() (*string, bool) {
	if o == nil || isNil(o.DateCreate) {
    return nil, false
	}
	return o.DateCreate, true
}

// HasDateCreate returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasDateCreate() bool {
	if o != nil && !isNil(o.DateCreate) {
		return true
	}

	return false
}

// SetDateCreate gets a reference to the given string and assigns it to the DateCreate field.
func (o *StructuresMysqlRestoreOrder) SetDateCreate(v string) {
	o.DateCreate = &v
}

// GetDateComplete returns the DateComplete field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetDateComplete() string {
	if o == nil || isNil(o.DateComplete) {
		var ret string
		return ret
	}
	return *o.DateComplete
}

// GetDateCompleteOk returns a tuple with the DateComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetDateCompleteOk() (*string, bool) {
	if o == nil || isNil(o.DateComplete) {
    return nil, false
	}
	return o.DateComplete, true
}

// HasDateComplete returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasDateComplete() bool {
	if o != nil && !isNil(o.DateComplete) {
		return true
	}

	return false
}

// SetDateComplete gets a reference to the given string and assigns it to the DateComplete field.
func (o *StructuresMysqlRestoreOrder) SetDateComplete(v string) {
	o.DateComplete = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StructuresMysqlRestoreOrder) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuresMysqlRestoreOrder) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StructuresMysqlRestoreOrder) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StructuresMysqlRestoreOrder) SetStatus(v string) {
	o.Status = &v
}

func (o StructuresMysqlRestoreOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.CopyInfo) {
		toSerialize["copy_info"] = o.CopyInfo
	}
	if !isNil(o.BackupDateCreate) {
		toSerialize["backup_date_create"] = o.BackupDateCreate
	}
	if !isNil(o.ServiceId) {
		toSerialize["service_id"] = o.ServiceId
	}
	if !isNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	if !isNil(o.DateCreate) {
		toSerialize["date_create"] = o.DateCreate
	}
	if !isNil(o.DateComplete) {
		toSerialize["date_complete"] = o.DateComplete
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableStructuresMysqlRestoreOrder struct {
	value *StructuresMysqlRestoreOrder
	isSet bool
}

func (v NullableStructuresMysqlRestoreOrder) Get() *StructuresMysqlRestoreOrder {
	return v.value
}

func (v *NullableStructuresMysqlRestoreOrder) Set(val *StructuresMysqlRestoreOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableStructuresMysqlRestoreOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableStructuresMysqlRestoreOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructuresMysqlRestoreOrder(val *StructuresMysqlRestoreOrder) *NullableStructuresMysqlRestoreOrder {
	return &NullableStructuresMysqlRestoreOrder{value: val, isSet: true}
}

func (v NullableStructuresMysqlRestoreOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructuresMysqlRestoreOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


