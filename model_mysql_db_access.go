/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// MysqlDbAccess struct for MysqlDbAccess
type MysqlDbAccess struct {
	Host *string `json:"host,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewMysqlDbAccess instantiates a new MysqlDbAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlDbAccess() *MysqlDbAccess {
	this := MysqlDbAccess{}
	return &this
}

// NewMysqlDbAccessWithDefaults instantiates a new MysqlDbAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlDbAccessWithDefaults() *MysqlDbAccess {
	this := MysqlDbAccess{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *MysqlDbAccess) GetHost() string {
	if o == nil || isNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlDbAccess) GetHostOk() (*string, bool) {
	if o == nil || isNil(o.Host) {
    return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *MysqlDbAccess) HasHost() bool {
	if o != nil && !isNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *MysqlDbAccess) SetHost(v string) {
	o.Host = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MysqlDbAccess) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlDbAccess) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
    return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MysqlDbAccess) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MysqlDbAccess) SetPassword(v string) {
	o.Password = &v
}

func (o MysqlDbAccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableMysqlDbAccess struct {
	value *MysqlDbAccess
	isSet bool
}

func (v NullableMysqlDbAccess) Get() *MysqlDbAccess {
	return v.value
}

func (v *NullableMysqlDbAccess) Set(val *MysqlDbAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlDbAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlDbAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlDbAccess(val *MysqlDbAccess) *NullableMysqlDbAccess {
	return &NullableMysqlDbAccess{value: val, isSet: true}
}

func (v NullableMysqlDbAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlDbAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


