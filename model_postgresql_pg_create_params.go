/*
API Управляемых сервисов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiCloud

import (
	"encoding/json"
)

// PostgresqlPgCreateParams struct for PostgresqlPgCreateParams
type PostgresqlPgCreateParams struct {
	DbName *string `json:"db_name,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Password *string `json:"password,omitempty"`
	Param *map[string]string `json:"param,omitempty"`
}

// NewPostgresqlPgCreateParams instantiates a new PostgresqlPgCreateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresqlPgCreateParams() *PostgresqlPgCreateParams {
	this := PostgresqlPgCreateParams{}
	return &this
}

// NewPostgresqlPgCreateParamsWithDefaults instantiates a new PostgresqlPgCreateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresqlPgCreateParamsWithDefaults() *PostgresqlPgCreateParams {
	this := PostgresqlPgCreateParams{}
	return &this
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *PostgresqlPgCreateParams) GetDbName() string {
	if o == nil || isNil(o.DbName) {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlPgCreateParams) GetDbNameOk() (*string, bool) {
	if o == nil || isNil(o.DbName) {
    return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *PostgresqlPgCreateParams) HasDbName() bool {
	if o != nil && !isNil(o.DbName) {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *PostgresqlPgCreateParams) SetDbName(v string) {
	o.DbName = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *PostgresqlPgCreateParams) GetRoleName() string {
	if o == nil || isNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlPgCreateParams) GetRoleNameOk() (*string, bool) {
	if o == nil || isNil(o.RoleName) {
    return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *PostgresqlPgCreateParams) HasRoleName() bool {
	if o != nil && !isNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *PostgresqlPgCreateParams) SetRoleName(v string) {
	o.RoleName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PostgresqlPgCreateParams) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlPgCreateParams) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
    return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PostgresqlPgCreateParams) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *PostgresqlPgCreateParams) SetPassword(v string) {
	o.Password = &v
}

// GetParam returns the Param field value if set, zero value otherwise.
func (o *PostgresqlPgCreateParams) GetParam() map[string]string {
	if o == nil || isNil(o.Param) {
		var ret map[string]string
		return ret
	}
	return *o.Param
}

// GetParamOk returns a tuple with the Param field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlPgCreateParams) GetParamOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Param) {
    return nil, false
	}
	return o.Param, true
}

// HasParam returns a boolean if a field has been set.
func (o *PostgresqlPgCreateParams) HasParam() bool {
	if o != nil && !isNil(o.Param) {
		return true
	}

	return false
}

// SetParam gets a reference to the given map[string]string and assigns it to the Param field.
func (o *PostgresqlPgCreateParams) SetParam(v map[string]string) {
	o.Param = &v
}

func (o PostgresqlPgCreateParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DbName) {
		toSerialize["db_name"] = o.DbName
	}
	if !isNil(o.RoleName) {
		toSerialize["role_name"] = o.RoleName
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !isNil(o.Param) {
		toSerialize["param"] = o.Param
	}
	return json.Marshal(toSerialize)
}

type NullablePostgresqlPgCreateParams struct {
	value *PostgresqlPgCreateParams
	isSet bool
}

func (v NullablePostgresqlPgCreateParams) Get() *PostgresqlPgCreateParams {
	return v.value
}

func (v *NullablePostgresqlPgCreateParams) Set(val *PostgresqlPgCreateParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresqlPgCreateParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresqlPgCreateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresqlPgCreateParams(val *PostgresqlPgCreateParams) *NullablePostgresqlPgCreateParams {
	return &NullablePostgresqlPgCreateParams{value: val, isSet: true}
}

func (v NullablePostgresqlPgCreateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresqlPgCreateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


